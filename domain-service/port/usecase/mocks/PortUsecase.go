// Code generated by MockGen. DO NOT EDIT.
// Source: usecase.go

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
	port "github.com/sin-ivan/port-project/domain-service/port"
)

// MockPortUsecase is a mock of PortUsecase interface
type MockPortUsecase struct {
	ctrl     *gomock.Controller
	recorder *MockPortUsecaseMockRecorder
}

// MockPortUsecaseMockRecorder is the mock recorder for MockPortUsecase
type MockPortUsecaseMockRecorder struct {
	mock *MockPortUsecase
}

// NewMockPortUsecase creates a new mock instance
func NewMockPortUsecase(ctrl *gomock.Controller) *MockPortUsecase {
	mock := &MockPortUsecase{ctrl: ctrl}
	mock.recorder = &MockPortUsecaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockPortUsecase) EXPECT() *MockPortUsecaseMockRecorder {
	return m.recorder
}

// GetByID mocks base method
func (m *MockPortUsecase) GetByID(id string) (*port.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByID", id)
	ret0, _ := ret[0].(*port.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByID indicates an expected call of GetByID
func (mr *MockPortUsecaseMockRecorder) GetByID(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByID", reflect.TypeOf((*MockPortUsecase)(nil).GetByID), id)
}

// GetAll mocks base method
func (m *MockPortUsecase) GetAll() ([]*port.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAll")
	ret0, _ := ret[0].([]*port.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAll indicates an expected call of GetAll
func (mr *MockPortUsecaseMockRecorder) GetAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAll", reflect.TypeOf((*MockPortUsecase)(nil).GetAll))
}

// Store mocks base method
func (m *MockPortUsecase) Store(arg0 *port.Port) (*port.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Store", arg0)
	ret0, _ := ret[0].(*port.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Store indicates an expected call of Store
func (mr *MockPortUsecaseMockRecorder) Store(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Store", reflect.TypeOf((*MockPortUsecase)(nil).Store), arg0)
}

// Update mocks base method
func (m *MockPortUsecase) Update(arg0 *port.Port) (*port.Port, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(*port.Port)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Update indicates an expected call of Update
func (mr *MockPortUsecaseMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockPortUsecase)(nil).Update), arg0)
}

// Delete mocks base method
func (m *MockPortUsecase) Delete(id string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", id)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Delete indicates an expected call of Delete
func (mr *MockPortUsecaseMockRecorder) Delete(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockPortUsecase)(nil).Delete), id)
}
